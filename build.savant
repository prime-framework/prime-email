/*
 * Copyright (c) 2014-2023, Inversoft Inc., All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

freemarkerVersion = "2.3.32"
guavaVersion = "32.1.2-jre"
guiceVersion = "6.0.0"
jakartaActivationVersion = "2.1.2"
jakartaInjectVersion = "2.0.1"
jakartaMailAPIVersion = "2.1.2"
jakartaMailVersion = "2.0.4"
slf4jVersion = "2.0.7"
testngVersion ="7.3.0"

project(group: "org.primeframework", name: "prime-email", version: "0.21.0", licenses: ["ApacheV2_0"]) {
  workflow {
    fetch {
      cache()
      url(url: "https://repository.savantbuild.org")
      maven()
    }
    publish {
      cache()
    }
    semanticVersions {
      mapping(id: "com.google.guava:listenablefuture:9999.0-empty-to-avoid-conflict-with-guava", version: "9999.0.0")
      mapping(id: "com.google.guava:guava-parent:26.0-android", version: "26.0.0")
    }
  }

  publishWorkflow {
    subversion(repository: "https://svn.savantbuild.org")
  }

  dependencies {
    group(name: "compile") {
      dependency(id: "com.google.inject:guice:${guiceVersion}")
      dependency(id: "com.google.guava:guava:${guavaVersion}", skipCompatibilityCheck: true)
      dependency(id: "jakarta.activation:jakarta.activation-api:${jakartaActivationVersion}")
      dependency(id: "jakarta.inject:jakarta.inject-api:${jakartaInjectVersion}", skipCompatibilityCheck: true)
      dependency(id: "jakarta.mail:jakarta.mail-api:${jakartaMailAPIVersion}")
      dependency(id: "javax.inject:javax.inject:1")
      dependency(id: "org.freemarker:freemarker:${freemarkerVersion}")
      dependency(id: "org.slf4j:slf4j-api:${slf4jVersion}", skipCompatibilityCheck: true)
    }
    group(name: "runtime") {
      // https://eclipse-ee4j.github.io/angus-mail/
      // - Include the base jar (core) and SMTP
      dependency(id: "org.eclipse.angus:angus-core:${jakartaMailVersion}")
      dependency(id: "org.eclipse.angus:smtp:${jakartaMailVersion}")
    }
    group(name: "test-compile", export: false) {
      dependency(id: "org.testng:testng:${testngVersion}")
    }
  }

  publications {
    standard()
  }
}

// Plugins
dependency = loadPlugin(id: "org.savantbuild.plugin:dependency:2.0.0")
java = loadPlugin(id: "org.savantbuild.plugin:java:2.0.0")
javaTestNG = loadPlugin(id: "org.savantbuild.plugin:java-testng:2.0.0")
idea = loadPlugin(id: "org.savantbuild.plugin:idea:2.0.0")
release = loadPlugin(id: "org.savantbuild.plugin:release-git:2.0.0")

// Plugin settings
java.settings.javaVersion = "1.8"
javaTestNG.settings.javaVersion = "1.8"

target(name: "clean", description: "Cleans the project") {
  java.clean()
}

target(name: "compile", description: "Compiles the project") {
  java.compile()
}

target(name: "jar", description: "JARs the project", dependsOn: ["compile"]) {
  java.jar()
}

target(name: "test", description: "Runs the project's tests", dependsOn: ["jar"]) {
  javaTestNG.test()
}

target(name: "doc", description: "Generate the project's JavaDoc", dependsOn: ["jar"]) {
  java.document()
}

target(name: "int", description: "Releases a local integration build of the project", dependsOn: ["test"]) {
  dependency.integrate()
}

target(name: "release", description: "Releases a full version of the project", dependsOn: ["test"]) {
  release.release()
}

target(name: "idea", description: "Updates the IntelliJ IDEA module file") {
  idea.iml()
}
